Задание:

Необходимо реализовать http-сервер на фреймворке netty
(http://netty.io/), со следующим функционалом:

1. По запросу на http://somedomain/hello отдает «Hello World» через 10 секунд
2. По запросу на http://somedomain/redirect?url=<url> происходит
переадресация на указанный url
3. По запросу на http://somedomain/status выдается статистика:
- общее количество запросов
- количество уникальных запросов (по одному на IP)
- счетчик запросов на каждый IP в виде таблицы с колонкам и IP,
кол-во запросов, время последнего запроса
- количество переадресаций по url'ам в виде таблицы, с колонками
url, кол-во переадресация
- количество соединений, открытых в данный момент
- в виде таблицы лог из 16 последних обработанных соединений, колонки
src_ip, URI, timestamp, sent_bytes, received_bytes, speed (bytes/sec)

Все это (вместе с особенностями имплементации в текстовом виде)
выложить на github, приложить к этому:
- скриншоты как выглядят станицы /status в рабочем приложении
- скриншот результата выполнения команды ab – c 100 – n 10000
http://somedomain/status
- еще один скриншот станицы /status, но уже после выполнение команды
ab из предыдущего пункта.

Использованные технологии и фреймворки при разработке:
- jdk 1.8
- netty-all-4.0.29.Final
- maven-3.0.5
- IntelliJ IDEA

Реализация:
Проект собран Maven. В папке target содержится файл для запуска Server_netty_solovey-1.0.jar. После запуска приложения
необходимо указать порт. После указания порта сервер запускается. Остановка сервера производится вводом stop.
Структура проекта:
Проект имеет 4 пакета:
1. responses. В этом пакете инкапсулируются ответы сервера на запросы клиента (/hello,/redirect?url=<url>,
/status).Все классы реализуют интерфейс Response, который имеет единственный метод response.
2. server_netty. В этом пакете реализована ключевая логика работы сервера. Класс ServerHandler обрабатывает запросы и
отвечает клиенту тем или иным ответом (response). Также этот класс ведет подсчет статистики. Класс ServerInitializer
добавляет обработчиков к pipeline канала. Класс ServerNetty инкапсулирует настройку сервера и запускает прослушивание
заданного порта.
3. start_server. В данном пакете содержится класс, имеющий main() метод, который обеспечивает ввод порта пользователем,
запуск сервера и остановку сервера вводом слова stop.
4. status. В этом пакете содержится 3 класса, которые инкапсулирую соединения с сервером, запросы к серверу, запросы на
переадресацию.
Скриношоты работы сервера и результатов тестирования прилагаются.
